<?php
  //session_name($_POST['ssname']);
  //session_start();
    //module_load_include('php', 'bingo_adm', 'php_rutils/RUtils');
    //module_load_include('php', 'bingo_adm', 'php_rutils/Dt');
    
    function bingo_adm_menu() {
       $items = array();
  
       $items['bingo_adm'] = array( //this creates a URL that will call this form at "examples/form-example"
              'title' => t('Administration'), //page title
              'description' => t('Administration'),
              'page callback' => 'bingo_adm_page', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
              //'page arguments' => array('bingo_adm_form'), //put the name of the form here
              'access callback' => TRUE,
              //'delivery callback' => 'drupal_json_output',
              'access arguments' => array('access_to_bingo_adm'),
              'type' => MENU_CALLBACK
       );
       $items['bingo_adm/game_devices'] = array( //this creates a URL that will call this form at "examples/form-example"
              'title' => t('Game Devices'), //page title
              'description' => t('Game Devices'),
              'page callback' => 'bingo_adm_page', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
              //'page arguments' => array('bingo_adm_form'), //put the name of the form here
              'access callback' => TRUE,
              //'delivery callback' => 'drupal_json_output',
              'access arguments' => array('access_to_game_devices'),
              'type' => MENU_CALLBACK
       );
       $items['bingo_adm/device_type'] = array( //this creates a URL that will call this form at "examples/form-example"
              'title' => t('Game Device Type'), //page title
              'description' => t('Game Device Type'),
              'page callback' => 'bingo_adm_page', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
              //'page arguments' => array('bingo_adm_form'), //put the name of the form here
              'access callback' => TRUE,
              //'delivery callback' => 'drupal_json_output',
              'access arguments' => array('access_to_game_device_type'),
              'type' => MENU_CALLBACK
       );
       return $items;
    }
function bingo_adm_permission() {
  return array(
    
      'access_to_bingo_adm' => array('title' => t('Access to bingo_adm'),
                                         'description' => t('Insert, Update, Delete'),),
      
      'access_to_game_devices' => array('title' => t('Access to game_devices'),
                                         'description' => t('Insert, Update, Delete'),), 

      'access_to_game_device_type' => array('title' => t('Access to game_device_type'),
                                         'description' => t('Insert, Update, Delete'),), 

      'access_to_game_device_balance' => array('title' => t('Access to device_balance'),
                                         'description' => t('Insert, Update, Delete'),), 

      'access_to_game_period' => array('title' => t('Access to game_period'),
                                         'description' => t('Insert, Update, Delete'),), 

      'access_to_game_period' => array('title' => t('Access to game_period'),
                                         'description' => t('Insert, Update, Delete'),),

      'access_to_game_settings' => array('title' => t('Access to game_period'),
                                         'description' => t('Insert, Update, Delete'),),
  );
}


function bingo_adm_page() {
    global $base_path;
    global $user;
    $action = "none";

    if(!user_access('access_to_game_devices')) {
       drupal_set_message(t('You are not authorized to access this page.'));
       return t('You are not authorized to access this page.');
    } //- See more at: http://www.webomelette.com/define-check-custom-permission-drupal-7#sthash.vszHIVAJ.dpuf

    if (isset($_REQUEST['action'])) {
       $action = $_REQUEST['action'];
       if ($action == "delete") {
          game_devices_delete($_REQUEST['device_id']);

       }
    }

    $items = array();
    $items[] = array('data' => '<a href="' . $base_path . 'bingo_adm/game_devices">game_devices</a>');             
    $items[] = array('data' => '<a href="' . $base_path . 'bingo_adm/device_type">device_type</a>');

    $output = theme_item_list(array('items' => $items, 'title' => t('Bingo Administration'), 'type' => 'ul', 'attributes' => array()));

    $form = drupal_get_form('game_devices_form');
    $output .= drupal_render($form);

    //$form = drupal_get_form('adm_common_filter_form');
    //$output .= drupal_render($form);
    

    return $output .  game_devices_table();
   // return get_list();


  }
  
 function game_devices_table() {
$header = array(
      array('data' => 'Device Id',     'field' => 'device_id',   'sort' => 'ASC'),
      array('data' => 'Device Code',   'field' => 'device_code', 'sort' => 'ASC'),
      array('data' => 'Status',        'field' => 'status',      'sort' => 'ASC'),
      array('data' => 'Type Id',       'field' => 'type_id',     'sort' => 'ASC'),
      array('data' => 'Comment',       'field' => 'comment',     'sort' => 'ASC'),
    );

  
$header = array(
      array('data' => 'Device Id',   'class' => '',  'datatable_options' => array('bSortable' => TRUE, 'bSearchable' => TRUE),),
      array('data' => 'Device Code',  'class' => '', 'datatable_options' => array('bSortable' => TRUE, 'bSearchable' => TRUE),),
      array('data' => 'Status',   'class' => '',     'datatable_options' => array('bSortable' => TRUE, 'bSearchable' => TRUE),),
      array('data' => 'Type Id',   'class' => '',    'datatable_options' => array('bSortable' => TRUE, 'bSearchable' => TRUE),),
      array('data' => 'Comment',   'class' => '',    'datatable_options' => array('bSortable' => TRUE, 'bSearchable' => TRUE),),
      array('data' => 'Options',   'class' => '',    'datatable_options' => array('bSortable' => FALSE, 'bSearchable' => FALSE),),
    );
    
  $fields = array('device_id', 'device_code','status','type_id','comment');

  //$output = get_themed_table('game_devices', $fields, 'device_id', $header);

  $output = get_themed_data_table('game_devices', $fields, 'device_id', $header);
  return $output;

}

/*
function bingo_adm_menu() {
  $items = array();

  $items['examples/form-example'] = array( //this creates a URL that will call this form at "examples/form-example"
    'title' => 'Example Form', //page title
    'description' => 'A form to mess around with.',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('bingo_adm_form'), //put the name of the form here
    'access callback' => TRUE
  );

  return $items;
}
*/

function game_devices_form($form, &$form_state) {
  global $base_path;
  $form_title = t('Add new device');
  $collapsed = false;
  //Fields
  $device_id = 0;
  $device_code = 0;
  $status = 0;
  $type_id = 0;
  $comment = "";
  $submit_title = "Add new device";

  //dpr($_POST);
  

  if (isset($_REQUEST['action']) && !isset($_POST['cancel'])) {
     $action = $_REQUEST['action'];
     if ($action == "edit") {
         $submit_title = "Edit";
         $device_id = $_REQUEST['device_id'];
         $form_title = t('Edit device');
         $collapsed = FALSE;

         $result = db_select('game_devices', 'd')
                            ->fields('d', array('device_id', 'device_code', 'status', 'type_id', 'comment'))
                            ->condition('device_id', $device_id)
                            ->execute();
          foreach ($result as $row) {
                  $device_code = $row->device_code;
                  $status = $row->status;
                  $type_id = $row->type_id;
                  $comment = $row->comment;
          }                            
     }
  }
  if (isset($_POST['cancel'])) {
      unset($_REQUEST);
      header('Location: ' . $base_path . 'bingo_adm');
  }

  $form['name'] = array(
    '#type' => 'fieldset',
    '#title' => $form_title,
    '#collapsible' => TRUE, // Added
    '#collapsed' => $collapsed,  // Added
  );
 $form['name']['device_id'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'Device Id',
    '#attributes' => array(
        'placeholder' => t('Enter the Device Id'),
    ),
    '#size' => 10,
    '#maxlength' => 100,
    '#required' => TRUE, //make this field required 
  );
  if ($device_id != 0) {
    $form['name']['device_id']['#default_value'] = $device_id;
  }

 $form['name']['device_code'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'Device Code',
    '#attributes' => array(
        'placeholder' => t('Device Code'),
    ),
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE, //make this field required 
  );
  if ($device_code != 0) {
    $form['name']['device_code']['#default_value'] = $device_code;
  }

 $form['name']['status'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'Status',
    '#attributes' => array(
        'placeholder' => t('Enter the Device Code'),
    ),
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE, //make this field required 
  );
 if ($status != 0) {
    $form['name']['status']['#default_value'] = $status;
  }

 $form['name']['type_id'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'Type Id',
    '#attributes' => array(
        'placeholder' => t('Enter the Type Id'),
    ),
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE, //make this field required 
  );
 if ($type_id != 0) {
    $form['name']['type_id']['#default_value'] = $type_id;
  }

 $form['name']['comment'] = array(
    '#type' => 'textarea', //you can find a list of available types in the form api
    '#title' => 'Comment',
    '#rows' => 4,
    '#attributes' => array(
        'placeholder' => t('Type your comment here'),
    ),
    '#required' => FALSE, 
  );
  if ($comment != "") {
    $form['name']['comment']['#default_value'] = $comment;
  }
$form['name']['cancel_link'] = array(
        '#type' => 'markup',
        '#value' => l(t('cancel'),'bingo_adm' ),

      );
  $form['name']['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t($submit_title),
  );
   $form['name']['cancel'] = array(
        '#type' => 'button',
        '#button_type' => 'reset',
        '#name' => 'cancel',
        '#submit' => 'false',
        '#value' => t("Cancel"),
        //'#attributes' => array(
        //   'onclick' => '$(this).parents("form").attr("allowSubmission", "false"); 
        //        window.location = "' .$base_path . 'bingo_adm";'),
      );
  
  return $form;
}

function game_devices_form_validate($form, &$form_state) {
  if (!($form_state['values']['device_id'] > 0)){
    form_set_error('price', t('Device id must be a positive number.'));
  }
  if (!($form_state['values']['device_code'] > 0)){
    form_set_error('price', t('Device Code must be a positive number.'));
  }
  if (!($form_state['values']['status'] > 0)){
    form_set_error('price', t('Status must be a positive number.'));
  }
  if (!($form_state['values']['type_id'] > 0)){
    form_set_error('price', t('Type id must be a positive number.'));
  }
}
function game_devices_delete($device_id) {
  try{
      db_delete('game_devices')
      ->condition('device_id', $device_id)
      ->execute();
      drupal_set_message(t('Device has been deleted!'));
  } catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }  
}
function game_devices_form_submit($form, &$form_state) {
  global $base_path;
  try{
      if (isset($form_state['values']['device_id'])) {
        $device_id = $form_state['values']['device_id'];
      }else{
        $device_id = 0;
      }
      
      $device_code = $form_state['values']['device_code'];
      $status = $form_state['values']['status'];
      $type_id = $form_state['values']['type_id'];
      $comment = $form_state['values']['comment'];

      $query = db_select('game_devices')->condition('device_id', $device_id);
      $query->addExpression('COUNT(*)');
      $count = $query->execute()->fetchField();

      if ($count > 0) {
        db_update('game_devices')
                  ->fields(array('device_code' => $device_code, 'status' => $status, 'type_id' => $type_id,'comment'=> $comment))
                  ->condition('device_id', $device_id)
                  ->execute();
        drupal_set_message(t('Device has been updated!'));
      }else{
        $id = db_insert('game_devices')
                      ->fields(array(
                        'device_id' => $device_id,
                        'device_code' => $device_code,
                        'status' => $status,
                        'type_id' => $type_id,
                        'comment' => $comment,
                      ))
                      ->execute();
        drupal_set_message(t('New device has been added!'));
      }
      unset($_REQUEST);
      header('Location: ' . $base_path . 'bingo_adm');
  } catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }  
}
?>
