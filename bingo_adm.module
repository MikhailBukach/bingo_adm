<?php
/*
function bingo_adm_menu() {
  $items = array();

  $items['examples/form-example'] = array( //this creates a URL that will call this form at "examples/form-example"
    'title' => 'Example Form', //page title
    'description' => 'A form to mess around with.',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('bingo_adm_form'), //put the name of the form here
    'access callback' => TRUE
  );

  return $items;
}
*/

function bingo_adm_menu()
{
    $items = array();

    $items['bingo_adm'] = array( //this creates a URL that will call this form at "examples/form-example"
        'title' => t('Administration'), //page title
        'description' => t('Administration'),
        'page callback' => 'bingo_adm_page', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
        //'page arguments' => array('bingo_adm_form'), //put the name of the form here
        'access callback' => TRUE,
        //'delivery callback' => 'drupal_json_output',
        //'access arguments' => array('access_to_bingo_adm'),
        'type' => MENU_CALLBACK
    );
    $items['bingo_adm/forms'] = array(
        'title' => t('Add/Edit'),
        'description' => t('Add/Edit'),
        'page callback' => 'bingo_adm_forms',
        'access callback' => TRUE,
        // 'access arguments' => array('access_to_game_devices', 'access_to_game_device_type', 'access_to_game_device_balance', 'access_to_game_period', 'access_to_game_settings'),
        'type' => MENU_CALLBACK
    );
    $items['bingo_adm/tables'] = array(
        'title' => t('Table'),
        'description' => t('Table'),
        'page callback' => 'bingo_adm_tables',
        'access callback' => TRUE,
        // 'access arguments' => get_tables_menu_permissions(),
        'type' => MENU_CALLBACK
    );

    return $items;
}

function bingo_adm_block_info()
{
    $blocks['bingo_adm'] = array('info' => t('Bingo Admin Menu'));
    return $blocks;
}

function bingo_adm_block_view($delta = '')
{
    global $base_path;
    $content = "";

    $tables_info = get_tables_info('all');

    $items = array();

    foreach ($tables_info as $table_name => $table_info) {
        if (user_access('access_to_' . $table_name . '_select')) {
            $items[] = array('data' => '<a href="' . $base_path . 'bingo_adm/tables?table_name=' . $table_name . '">' . t($table_info['title']) . '</a>');
        }
    }

    $content = theme_item_list(array('items' => $items, 'title' => t('Bingo Tables'), 'type' => 'ul', 'attributes' => array()));
    $block['subject'] = t('Bingo Tables');
    $block['content'] = $content;
    return $block;
}

function get_tables_menu_permissions()
{
    $permission = array();
    $tables_info = get_tables_info('all');

    foreach ($tables_info as $table_name => $table_info) {

        $permission[] = 'access_to_' . $table_name . '_select';

    }

    return $permission;
}

function bingo_adm_permission()
{
    $permission = array();
    $tables_info = get_tables_info('all');


    foreach ($tables_info as $table_name => $table_info) {

        $permission['access_to_' . $table_name . '_select'] = array('title' => t('Access to ' . $table_name . ' - Select'),
            'description' => t('access_to_' . $table_name . '_select'));
        $permission['access_to_' . $table_name . '_insert'] = array('title' => t('Access to ' . $table_name . ' - Insert'),
            'description' => t('access_to_' . $table_name . '_insert'));
        $permission['access_to_' . $table_name . '_update'] = array('title' => t('Access to ' . $table_name . ' - Update'),
            'description' => t('access_to_' . $table_name . '_update'));
        $permission['access_to_' . $table_name . '_delete'] = array('title' => t('Access to ' . $table_name . ' - Delete'),
            'description' => t('access_to_' . $table_name . '_delete'));

    }

    return $permission;
}


function bingo_adm_page()
{
    global $base_path;

    $tables_info = get_tables_info('all');

    //if (!user_access('access_to_bingo_adm')) {
    //    drupal_set_message(t('You are not authorized to access this page.'), 'error');
    //    return t('You are not authorized to access this page.');
    //} //- See more at: http://www.webomelette.com/define-check-custom-permission-drupal-7#sthash.vszHIVAJ.dpuf


    $items = array();

    foreach ($tables_info as $table_name => $table_info) {
        if (user_access('access_to_' . $table_name . '_select')) {
            $items[] = array('data' => '<a href="' . $base_path . 'bingo_adm/tables?table_name=' . $table_name . '">' . t($table_info['title']) . '</a>');
        }
    }

    $output = theme_item_list(array('items' => $items, 'title' => t('Bingo Tables'), 'type' => 'ul', 'attributes' => array()));

    return $output;
}


function bingo_adm_tables()
{
    $table_name = "";
    $output = "";

    if (isset($_REQUEST['table_name'])) {
        $table_name = $_REQUEST['table_name'];
    } else {
        drupal_set_message(t('Missing a required parameter - "table_name".'), 'error');
        return $output = bingo_admin_link($table_name) . t('Missing a required parameter - "table_name".');
    }

    if (!user_access('access_to_' . $table_name . '_select')) {
        drupal_set_message(t('You are not authorized to access this page.'), 'error');
        return t('You are not authorized to access this page.');
    }

    $table_info = get_tables_info($table_name);

    if (isset($_REQUEST['action'])) {
        $action = $_REQUEST['action'];
        if ($action == "delete") {

            delete_record($table_name, $table_info['key_field'], $_REQUEST[$table_info['key_field']]);

            $options = array('query' => array('table_name' => $table_name));
            drupal_goto('bingo_adm/tables', $options);
        }
    }


    //$output = bingo_admin_link($table_name);
    $output .= add_new_record_link($table_info['title'], 'Add new record', $table_name);
    $output .= get_themed_data_table($table_name, $table_info['fields'], $table_info['key_field'], $table_info['headers'], $table_info['ref_fields']);

    return $output;
}


function bingo_adm_forms()
{

    $table_name = "";
    $output = "";

    if (isset($_REQUEST['table_name'])) {
        $table_name = $_REQUEST['table_name'];
    }

    if (user_access('access_to_' . $table_name . '_insert') || user_access('access_to_' . $table_name . '_update')) {
        $form = drupal_get_form('bingo_adm_form');

        //$output = bingo_admin_link($table_name);
        $output .= back_to_table_link($table_name);
        $output .= drupal_render($form);

        return $output;
    } else {
        drupal_set_message(t('You are not authorized to access this page.'), 'error');
        return t('You are not authorized to access this page.');
    }

}

function bingo_adm_form($form, &$form_state)
{
    global $base_path;
    $table_name = "";
    $form_fields = array();
    $form = array();
    $def_values = array();

    if (isset($_REQUEST['table_name'])) {
        $table_name = $_REQUEST['table_name'];

        $form_info = get_forms_info($table_name);
        $form_fields = $form_info['form_fields'];
        $fields = get_form_fields_array($form_info);

        if (isset($_REQUEST['action'])) {
            if ($_REQUEST['action'] == 'edit') {
                $def_values = get_row($table_name, $fields, $form_info['key_field'], $_REQUEST['value']);
                foreach ($def_values as $field_name => $field_value) {
                    $form_fields[$field_name]['#default_value'] = $field_value;
                }
                $form_fields[$form_info['key_field']]['#disabled'] = true;
            }
        }

        $form = build_form_for_table($form_info['title'], $table_name, $form_fields);

    }

    return $form;

}

function bingo_adm_form_submit($form, &$form_state)
{
    global $base_path;
    global $user;
    $table_name = "";
    $form_info = array();
    $fields_values = array();
    $action = "add";
    $form_fields = array();

    if (isset($_REQUEST['table_name'])) {
        $table_name = $_REQUEST['table_name'];
        if (isset($_REQUEST['action'])) {
            $action = $_REQUEST['action'];
        }
        $form_info = get_forms_info($table_name);
        $form_fields = $form_info['form_fields'];

        foreach ($form_fields as $field_name => $field_attributes) {
            if ($field_name == $form_info['key_field'] && $action == "add") {
                $fields_values[$field_name] = null;
            } else {
                $fields_values[$field_name] = $form_state['values'][$field_name];
            }

        }

    }

    if (insert_update_table($table_name, $form_info['key_field'], $fields_values, $action)) {
        $options = array('query' => array('table_name' => $table_name));
        drupal_goto('bingo_adm/tables', $options);
    }

}


function get_form_fields_array($form_info)
{
    $fields = array();
    $form_fields = $form_info['form_fields'];

    foreach ($form_fields as $field_name => $field_attributes) {
        $fields[] = $field_name;
    }

    return $fields;
}

function get_tables_info($table_name)
{

    $table_info = array();
    #game_devices
    $headers = build_headers_for_data_table($table_name, array('Device Id', 'Device Code', 'Status', 'Device Type', 'Comment'));

    $fields = array('device_id', 'device_code', 'status', 'type_id', 'comment');
    $ref_fields = array('type_id' =>
        array('table_name' => 'game_device_type', 'key_field' => 'type_id', 'value_field' => array('type_name'))
    );
    $table_info['game_devices'] = array('title' => 'Game Devices', 'key_field' => 'device_id', 'headers' => $headers, 'fields' => $fields, 'ref_fields' => $ref_fields);

    #game_device_type
    $headers = build_headers_for_data_table($table_name, array('Type Id', 'Type Name', 'Game Limit', 'Game Mask'));
    $fields = array('type_id', 'type_name', 'game_limit', 'game_mask');
    $ref_fields = array();

    $table_info['game_device_type'] = array('title' => 'Game Device Types', 'key_field' => 'type_id', 'headers' => $headers, 'fields' => $fields, 'ref_fields' => $ref_fields);

    #game_device_balance
    $headers = build_headers_for_data_table($table_name, array('Id Balance', 'User Id', 'Period', 'Device', 'Balance', 'Status'));
    $fields = array('id_balance', 'user_id', 'period_id', 'device_id', 'balance', 'status');
    $ref_fields = array('device_id' =>
        array('table_name' => 'game_devices', 'key_field' => 'device_id', 'value_field' => array('device_code')),
        'period_id' =>
            array('table_name' => 'game_period', 'key_field' => 'period_id', 'value_field' => array('starting_date', 'finishing_date')),
        'user_id' =>
            array('table_name' => 'users', 'key_field' => 'uid', 'value_field' => array('name')),
    );
    $table_info['game_device_balance'] = array('title' => 'Game Device Balance', 'key_field' => 'id_balance', 'headers' => $headers, 'fields' => $fields, 'ref_fields' => $ref_fields);

    #game_period
    $headers = build_headers_for_data_table($table_name, array('Period Id', 'Starting Date', 'Finishing Date'));
    $fields = array('period_id', 'starting_date', 'finishing_date');
    $ref_fields = array();
    $table_info['game_period'] = array('title' => 'Game Period', 'key_field' => 'period_id', 'headers' => $headers, 'fields' => $fields, 'ref_fields' => $ref_fields);

    #game_settings
    $headers = build_headers_for_data_table($table_name, array('Id', 'Settings Name', 'Settings Value'));
    $fields = array('id', 'settings_name', 'settings_value');
    $ref_fields = array();
    $table_info['game_settings'] = array('title' => 'Game Settings', 'key_field' => 'id', 'headers' => $headers, 'fields' => $fields, 'ref_fields' => $ref_fields);

    //drupal_set_message(json_encode($table_info));
    if (!isset($table_info[$table_name])) {
        return $table_info;
    } else {
        return $table_info[$table_name];
    }

}

function get_forms_info($table_name)
{
    $forms_info = array();
    $form_fields = array();

    # game_devices
    $form_fields = array('device_id' => array('#type' => 'textfield', '#title' => 'Device Id', '#required' => true),
        'device_code' => array('#type' => 'textfield', '#title' => 'Device Code', '#required' => true),
        'type_id' => array('#type' => 'select', '#title' => 'Device Type', '#required' => true, '#options' =>
            array('table_name' => 'game_device_type',
                'key_field' => 'type_id',
                'value_field' => array('type_name'))),
        'status' => array('#type' => 'textfield', '#title' => 'Status', '#required' => true),
        'comment' => array('#type' => 'textarea', '#title' => 'Comment', '#required' => false));
    $forms_info['game_devices'] = array('title' => 'Game Devices', 'key_field' => 'device_id', 'form_fields' => $form_fields);

    # game_device_type
    $form_fields = array('type_id' => array('#type' => 'textfield', '#title' => 'Type Id', '#required' => true),
        'type_name' => array('#type' => 'textfield', '#title' => 'Type Name', '#required' => true),
        'game_limit' => array('#type' => 'textfield', '#title' => 'Game Limit', '#required' => true),
        'game_mask' => array('#type' => 'textfield', '#title' => 'Game Mask', '#required' => true));
    $forms_info['game_device_type'] = array('title' => 'Game Device Type', 'key_field' => 'type_id', 'form_fields' => $form_fields);

    # game_device_balance
    $form_fields = array('id_balance' => array('#type' => 'textfield', '#title' => 'Id Balance', '#required' => false, '#disabled' => true),
        'device_id' => array('#type' => 'select', '#title' => 'Device', '#required' => true, '#options' =>
            array('table_name' => 'game_devices',
                'key_field' => 'device_id',
                'value_field' => array('device_code'))),
        'period_id' => array('#type' => 'select', '#title' => 'Period', '#required' => true, '#options' =>
            array('table_name' => 'game_period',
                'key_field' => 'period_id',
                'value_field' => array('starting_date', 'finishing_date'))),
        'balance' => array('#type' => 'textfield', '#title' => 'Balance', '#required' => true),
        'status' => array('#type' => 'textfield', '#title' => 'Status', '#required' => true),
        'user_id' => array('#type' => 'select', '#title' => 'User Id', '#required' => true, '#default_value' => '<user>', '#disabled' => true, '#options' =>
            array('table_name' => 'users',
                'key_field' => 'uid',
                'value_field' => array('name'))),
    );
    $forms_info['game_device_balance'] = array('title' => 'Game Device Balance', 'key_field' => 'id_balance', 'form_fields' => $form_fields);

    # game_period '#attributes' => array('autocomplete' =>'off','readonly' => 'readonly')
    $form_fields = array('period_id' => array('#type' => 'textfield', '#title' => 'Period Id', '#required' => true),
        'starting_date' => array('#type' => 'date_popup', '#title' => 'Starting Date', '#required' => true),
        'finishing_date' => array('#type' => 'date_popup', '#title' => 'Finishing Date', '#required' => true));
    $forms_info['game_period'] = array('title' => 'Game Period', 'key_field' => 'period_id', 'form_fields' => $form_fields);

    # game_settings
    $form_fields = array('id' => array('#type' => 'textfield', '#title' => 'Id', '#required' => true),
        'settings_name' => array('#type' => 'textfield', '#title' => 'Settings Name', '#required' => true),
        'settings_value' => array('#type' => 'textfield', '#title' => 'Settings Value', '#required' => true));
    $forms_info['game_settings'] = array('title' => 'Game Settings', 'key_field' => 'id', 'form_fields' => $form_fields);

    return $forms_info[$table_name];

}

function bingo_admin_link($table_name)
{
    global $base_path;
    $title = "";
    $table_info = get_tables_info($table_name);

    if (!isset($table_info['title'])) {
        $title = "Bingo Administration";
    } else {
        $title = $table_info['title'];
    }

    $items = array();
    if (user_access('access_to_bingo_adm')) {
        $items[] = array('data' => '<a href="' . $base_path . 'bingo_adm">' . t('Back to menu') . '</a>');
    }

    $output = theme_item_list(array('items' => $items, 'title' => t($title), 'type' => 'ul', 'attributes' => array()));
    return $output;

}

function back_to_table_link($table_name)
{
    global $base_path;
    $title = "";
    $table_info = get_tables_info($table_name);

    if (!isset($table_info['title'])) {
        $title = "Tables";
    } else {
        $title = $table_info['title'];
    }

    $items = array();
    if (user_access('access_to_bingo_adm')) {
        $items[] = array('data' => '<a href="' . $base_path . 'bingo_adm/tables?table_name=' . $table_name . '">' . t('Back to ' . $title) . '</a>');
    }

    $output = theme_item_list(array('items' => $items, 'title' => t($title), 'type' => 'ul', 'attributes' => array()));
    return $output;

}

function add_new_record_link($caption, $link_title, $table_name)
{
    global $base_path;

    $items = array();
    if (user_access('access_to_' . $table_name . '_insert')) {
        $items[] = array('data' => '<a href="' . $base_path . 'bingo_adm/forms?table_name=' . $table_name . '">' . t($link_title) . '</a>');
    }

    $output = theme_item_list(array('items' => $items, 'title' => t($caption), 'type' => 'ul', 'attributes' => array()));
    return $output;

}

/*function game_devices_form_validate($form, &$form_state)
{
    if (!($form_state['values']['device_id'] > 0)) {
        form_set_error('price', t('Device id must be a positive number.'));
    }
    if (!($form_state['values']['device_code'] > 0)) {
        form_set_error('device_code', t('Device Code must be a positive number.'));
    }
    if (!($form_state['values']['status'] > 0)) {
        form_set_error('status', t('Status must be a positive number.'));
    }
    if (!($form_state['values']['type_id'] > 0)) {
        form_set_error('type_id', t('Type id must be a positive number.'));
    }
}*/
?>
