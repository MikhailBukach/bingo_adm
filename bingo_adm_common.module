<?php
function delete_record($table_name, $key_field, $field_value)
{
    if (user_access('access_to_' . $table_name . '_delete')) {
        try {
            db_delete($table_name)
                ->condition($key_field, $field_value)
                ->execute();
            drupal_set_message(t('Record has been deleted!'));
            return true;
        } catch (Exception $e) {
            drupal_set_message($e->getMessage(), 'error');
            return false;
        }
    } else {
        drupal_set_message(t('You are not authorized to access this page.'), 'error');
        return false;
    }
}

function insert_update_table($table_name, $key_field, $fields_values, $action = 'add')
{
    global $base_path;

    try {

        $query = db_select($table_name)->condition($key_field, $fields_values[$key_field]);
        $query->addExpression('COUNT(*)');
        $count = $query->execute()->fetchField();


        if ($count > 0 && $action == 'edit') {
            if (user_access('access_to_' . $table_name . '_update')) {
                db_update($table_name)
                    ->fields($fields_values)
                    ->condition($key_field, $fields_values[$key_field])
                    ->execute();
                drupal_set_message(t('Record has been updated!'));
                return true;
            } else {
                drupal_set_message(t('You are not authorized to access this page.'), 'error');
                return false;
            }
        } else {
            if (user_access('access_to_' . $table_name . '_insert')) {
                $id = db_insert($table_name)
                    ->fields($fields_values)
                    ->execute();
                drupal_set_message(t('New record has been added!'));
                return true;
            } else {
                drupal_set_message(t('You are not authorized to access this page.'), 'error');
                return false;
            }
        }

    } catch (Exception $e) {
        drupal_set_message($e->getMessage(), 'error');
        return false;
    }
}

function build_form_for_table($title, $table_name, $fields)
{
    $form = array();
    $form[$table_name] = array(
        '#type' => 'fieldset',
        '#title' => $title,
        '#collapsible' => true,
        '#collapsed' => false,
    );

    foreach ($fields as $field_name => $attributes) {

        foreach ($attributes as $attr_name => $attr_value) {

            if ($attr_name == '#options') {
                $form[$table_name][$field_name]['#options'] = get_select_options($attr_value['table_name'], $attr_value['key_field'], $attr_value['value_field']);

            } else {
                $form[$table_name][$field_name][$attr_name] = $attr_value;
            }

        }

    }
    $form[$table_name]['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );
    /*$form[$table_name]['cancel'] = array(
        '#type' => 'button',
        '#button_type' => 'reset',
        '#name' => 'cancel',
        '#submit' => 'false',
        '#value' => t("Cancel"),
        //'#attributes' => array(
        //   'onclick' => '$(this).parents("form").attr("allowSubmission", "false"); 
        //        window.location = "' .$base_path . 'bingo_adm";'),
    );*/
    return $form;
}

function get_select_options($table_name, $key_field, $value_fields, $condition = null)
{
    $select_fields = $value_fields;
    $select_fields[] = $key_field;

    $select = db_select($table_name, 't');

    $select->fields('t', $select_fields);

    if (isset($condition)) {
        $select->condition($key_field, $condition);
    }

    # execute the query
    $results = $select->execute();
    $rows = array();
    //$rows['-1'] = t('--- Select ---');
    $ret_value = "";

    foreach ($results as $row) {
        foreach ($value_fields as $value_field) {
            $ret_value .= $row->$value_field . ' - ';
        }
        $rows[$row->$key_field] = substr($ret_value, 0, strlen($ret_value) - 3);
        $ret_value = "";
    }

    return $rows;
}

function get_ref_field_value($table_name, $key_field, $value_fields, $condition)
{
    $ret_value = "";

    $select = db_select($table_name, 't')
        ->condition($key_field, $condition)
        ->fields('t', $value_fields);

    # execute the query
    $results = $select->execute();

    foreach ($results as $row) {
        foreach ($value_fields as $value_field) {
            $ret_value .= $row->$value_field . ' - ';
        }
        $ret_value = substr($ret_value, 0, strlen($ret_value) - 3);
    }

    return $ret_value;

}

function get_row($table_name, $fields, $key_field, $key_value)
{
    $row_cols = array();

    $result = db_select($table_name, 'd')
        ->fields('d', $fields)
        ->condition($key_field, $key_value)
        ->execute();

    foreach ($result as $row) {
        foreach ($fields as $field_name) {
            $filed_value = $row->$field_name;
            $row_cols[$field_name] = $filed_value;
        }
    }
    return $row_cols;
}

function get_rows($table_name, $fields, $key_field, $references = null)
{
    global $base_path;
    $upd_link = "";
    $del_link = "";

    $select = db_select($table_name, 't')
        ->fields('t', $fields)
        ->orderBy($key_field, 'DESC');  # TODO сортировка должна быть в метаданных табл

    # execute the query
    $results = $select->execute();

    # configure the table rows
    $rows = array();
    foreach ($results as $row) {
        $row_cols = array();

        foreach ($fields as $field_name) {
            $filed_value = $row->$field_name;
            #Try to get reference value
            if (isset($references)) {
                foreach ($references as $ref_fld_name => $ref) {
                    if ($ref_fld_name == $field_name) {
                        $filed_value = get_ref_field_value($ref['table_name'], $ref['key_field'], $ref['value_field'], $filed_value);
                    }
                }
            }

            $row_cols[] = $filed_value;
        }

        if (user_access('access_to_' . $table_name . '_update')) {
            $upd_link = "<a href=\"" . $base_path . "bingo_adm/forms?table_name=$table_name&action=edit&key_field=$key_field&value=" . $row->$key_field . "\">" . t("Edit") . "</a>";
        }
        if (user_access('access_to_' . $table_name . '_delete')) {
            $del_link = "<a onclick=\"return confirm('" . t('Are you sure you want to delete this record?') . "');\" href=\"" . $base_path . "bingo_adm/tables?table_name=$table_name&action=delete&$key_field=" . $row->$key_field . "\">" . t("Delete") . "</a>";
        }

        if (strlen($upd_link . $del_link) > 0) {
            if (strlen($upd_link) > 0 && strlen($del_link) > 0) {
                $upd_link .= "&nbsp;|&nbsp;";
            }
            $row_cols[] = $upd_link . $del_link;
        }

        $rows[] = $row_cols;
    }
    return $rows;
}


function build_headers_for_data_table($table_name, $fields)
{
    $header = array();

    foreach ($fields as $field_name) {
        $header[] = array('data' => t($field_name), 'class' => '', 'datatable_options' => array('bSortable' => TRUE, 'bSearchable' => TRUE));
    }

    if (user_access('access_to_' . $table_name . '_update') || user_access('access_to_' . $table_name . '_delete')) {
        $header[] = array('data' => t('Options'), 'class' => '', 'datatable_options' => array('bSortable' => FALSE, 'bSearchable' => FALSE));
    }


    return $header;
}

function get_themed_data_table($table_name, $fields, $key_field, $header, $references = null)
{
    // Table settings.
    $attributes['datatable_options'] = array(
        //'bFilter'   => TRUE,
        'bInfo' => FALSE,
        // "sScrollY" => 200,
        // "bJQueryUI" => true,
        "bStateSave" => true,
        "sPaginationType" => "full_numbers"
    );

    $rows = get_rows($table_name, $fields, $key_field, $references);

    $variables = array(
        'attributes' => $attributes,
        'header' => $header,
        'rows' => $rows,
    );

    $output = theme('datatable', $variables);

    return $output;
}

/*function get_themed_table($table_name, $fields, $key_field, $header, $limit = 10)
{
    global $base_path;
    drupal_set_message('get_themed_table');

    # set the database table and initial SelectQuery options
    # $select is a SelectQuery object.
    # @see http://api.drupal.org/api/drupal/includes--database--select.inc/class/Se...
    $select = db_select($table_name, 't')
        ->extend('PagerDefault')
        ->extend('TableSort');

    # get the desired fields
    # orderByHeader is a TableSort method (http://api.drupal.org/api/drupal/includes--tablesort.inc/function/TableS...)
    #$select->condition('type', 6)
    $select->fields('t', $fields)
        ->limit($limit)
        ->orderByHeader($header)
        ->orderBy($key_field, 'DESC');  # TODO this call seems to be losing to orderByHeader on page load

    # execute the query
    $results = $select->execute();

    # configure the table rows
    $rows = array();
    foreach ($results as $row) {
        $row_cols = array();

        foreach ($fields as $field_name) {
            $row_cols[] = $row->$field_name;
        }

        $row_cols[] = "<a href=\"" . $base_path . "bingo_adm?action=edit&$key_field=" . $row->$key_field . "\">" . t("Edit") . "</a>";
        $row_cols[] = "<a href=\"" . $base_path . "bingo_adm?action=delete&$key_field=" . $row->$key_field . "\">" . t("Delete") . "</a>";

        $rows[] = $row_cols;
    }

    $output = theme('table', array('header' => $header,
        'rows' => $rows));
    # add the pager
    $output .= theme('pager');

    return $output;

}*/

/*
 *
 * function adm_common_filter_form($form, &$form_state)
{
    global $base_path;
    $search_text = "";

    $form['filter'] = array(
        '#type' => 'fieldset',
        '#title' => t('Filter'),
        '#attributes' => array('class' => array('container-inline')),
        '#collapsible' => TRUE, // Added
        '#collapsed' => FALSE,  // Added
    );


    $form['filter']['rows'] = array(
        '#title' => t('Show'),
        '#type' => 'select',

        // '#description' => t('entries'),
        '#options' => array(10, 25, 50, 100),
    );

    $form['filter']['markup'] = array(
        '#type' => 'markup',
        '#markup' => '<div style="width:50%">&nbsp;</div>',
    );

    $form['filter']['search_text'] = array(
        '#type' => 'textfield', //you can find a list of available types in the form api
        '#attributes' => array(
            'placeholder' => t('Search by all columns'),
        ),
        //'#attributes' => array('style' => array('float:right')),
        '#title' => t('Search:'),
        '#size' => 30,
        '#maxlength' => 100,

    );

    if ($search_text != "") {
        $form['filter']['search_text']['#default_value'] = $device_id;
    }

    $form['filter']['submit_search_button'] = array(
        '#type' => 'submit',
        //'#attributes' => array('style' => array('float:right')),
        '#value' => t('Apply'),
    );
    $form['filter']['clear'] = array(
        '#type' => 'button',
        '#button_type' => 'reset',
        '#name' => 'clear_filter',
        '#submit' => 'false',
        '#value' => t("Clear"),
        //'#attributes' => array(
        //   'onclick' => '$(this).parents("form").attr("allowSubmission", "false"); 
        //        window.location = "' .$base_path . 'bingo_adm";'),
    );

    return $form;
}

function adm_common_filter_form_submit($form, &$form_state)
{
    global $base_path;
    drupal_set_message('adm_common_filter_form_submit');
    dpr($form);
    if (isset($form_state['values']['search_text'])) {
        $search_text = $form_state['values']['search_text'];
        drupal_set_message($search_text);
    }

}*/

?>